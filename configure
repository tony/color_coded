#!/bin/sh

# Re-invoke the configure script
# and keep the output at bay.
if [ "$1" != "quiet" ];
then
  $0 "quiet" $@ > /dev/null
  exit $?
fi
shift

set -o errexit
set -o nounset

# Determine system
uname_linux=0
uname_cygwin=0
uname_osx=0
uname_arch=$(uname -m)
uname=$(uname)
if [ "$uname" = "Linux" ];
then
  uname_linux=1
elif [ "$uname" = "Darwin" ];
then
  uname_osx=1
elif echo "$(uname)" | grep -q "BSD" ;
then
  uname_bsd=1
elif [ "$(uname -o)" = "Cygwin" ];
then
  uname_cygwin=1
else
  printf "Invalid uname ($uname): unsuppported platform\n" 1>&2
  exit 1
fi

log() { printf "$@\n" 1>&2; }
log_start() { printf "$@" 1>&2; }
log_end() { printf "$@\n" 1>&2; }
log_exit() { printf "$@\n" 1>&2; exit 1; }

project=color_coded
log "Configuring ${project}"

cxx_platform_flags=
ld_platform_libs=

# Project-specific flags
cxx=c++
clang=0
gcc=0

if [ "1" -eq "$uname_linux" ];
then
  log "Platform: Linux"
  if [ -f /etc/debian_version ];
  then
    ld_platform_libs="-llua5.2 "$ld_platform_libs
  else
    ld_platform_libs="-llua "$ld_platform_libs
fi
elif [ "1" -eq "$uname_bsd" ];
then
  echo "freebsd"
elif [ "1" -eq "$uname_osx" ];
then
  log "Platform: OS X"
  ld_platform_libs="-framework CoreFoundation "$ld_platform_libs
elif [ "1" -eq "$uname_cygwin" ];
then
  log "Platform: Cygwin (NOT TESTED)"
fi

[ -d "/opt/local/lib" ] && ld_platform_libs="-L/opt/local/lib "$ld_platform_libs
[ -d "/opt/local/lib/lua/5.2" ] && ld_platform_libs="-L/opt/local/lib/lua/5.2 "$ld_platform_libs
[ -d "/usr/local/lib/x86_64-linux-gnu" ] && ld_platform_libs="-L/usr/local/lib/x86_64-linux-gnu "$ld_platform_libs
[ -d "/usr/lib/x86_64-linux-gnu" ] && ld_platform_libs="-L/usr/lib/x86_64-linux-gnu "$ld_platform_libs

show_help() {
  log "Usage: $0 [OPTION...]"
  log
  log "Options:"
  log "  --with-cxx=[c++]                             Set C++ compiler"
  log "  -h, --help                                   Show this help message"
  log
  exit 0
}

# Parse params
for i in "$@"
do
  case $i in
    -h)
      show_help
      ;;
    --help*)
      show_help
      ;;

    --with-cxx)
      shift
      cxx="$1"
      shift
      ;;
    --with-cxx=*)
      cxx="${i#*=}"
      shift
      ;;

    *)
      # Unknown option
      ;;
  esac
done

# Update after params
log

# Recount the compiler settings
if [ $clang -eq 0 -a $gcc -eq 0 ];
then
  set +o errexit
    "$cxx" -v 2>&1 | egrep "clang version|LLVM" 2>&1 > /dev/null
    if [ $? -eq 0 ];
    then
      clang=1
      cxx_platform_flags="-stdlib=libc++ "$cxx_platform_flags
      ld_platform_libs=$ld_platform_libs" -lc++ "
    fi

    "$cxx" -v 2>&1 | grep "gcc version" 2>&1 > /dev/null
    if [ $? -eq 0 ];
    then
      gcc=1
    fi

    [ $clang -eq 0 && $gcc -eq 0 ] && log_exit "unknown compiler: $cxx"
  set -o errexit
fi

log "Compiler: $cxx"
log "CXX platform flags: ${cxx_platform_flags:-"none"}"
log "LD platform flags: ${ld_platform_libs:-"none"}"
log

log_start "Updating submodules..."
log_end " done"

log_start "Downloading clang..."
clang_url="http://llvm.org/releases/3.6.0"

if [ 1 -eq $uname_osx ];
then
  clang_dirname="clang+llvm-3.6.0-x86_64-apple-darwin"
  clang_md5="103e06006c88d391c9c369a4671e3363"
  clang_filename="${clang_dirname}.tar.xz"
elif [ 1 -eq $uname_bsd ];
then
  if [ "x86_64" == "${uname_arch}" ];
    clang_dirname="clang+llvm-3.6.0-amd64-unknown-freebsd10"
    clang_md5="103e06006c88d391c9c369a4671e3363"
  then
   clang_dirname="clang+llvm-3.6.0-i386-unknown-freebsd10"
   clang_md5="0668d1db2d90364c25795fb60e9dc89a"
  fi
  clang_filename="${clang_dirname}.tar.xz"
else
  if [ "x86_64" == "${uname_arch}" ];
  then
    clang_dirname="clang+llvm-3.6.0-x86_64-linux-gnu-ubuntu-14.04"
    clang_md5="cfb2ebc01573e666770b9c5f72deb04e"
    clang_filename="${clang_dirname}.tar.xz"
  else
    log "WARNING: No pre-built Clang 3.6.0 binaries for 32 bit Linux, downloading Clang 3.3"
    clang_url="http://llvm.org/releases/3.3"
    clang_dirname="clang+llvm-3.3-i386-debian6"
    clang_md5="415d033b60659433d4631df894673802"
    clang_filename="${clang_dirname}.tar.bz2"
  fi
fi

clang_final_filename="./${clang_filename}"
if [ ! -f $clang_final_filename -o -f .downloading_clang ];
then
  log_end

  # Ensure we have xz installed
  type xz 2>&1 > /dev/null || \
    log_exit " (error) xz is required to unpack clang; see README.md"

  touch .downloading_clang
  curl -C - -o $clang_final_filename -# "${clang_url}/${clang_filename}" 
  rm -f .downloading_clang

  log_start "Validating md5..."
  rm -f clang_md5
  printf "$clang_md5 $clang_final_filename\n" > clang_md5
  set +o errexit
    md5sum -c clang_md5 2>&1 > /dev/null
    result=$?
  if [ $result -ne 0 -a "$(md5 -q $clang_final_filename 2> /dev/null || true)" != $clang_md5 ];
  then
    log_exit " failed! (remove $clang_final_filename and try to configure again)"
  fi
  set -o errexit
  rm -f clang_md5
  log_end " done"

  log_start "Extracting..."
  mkdir -p $clang_dirname
  tar xf $clang_final_filename -C $clang_dirname --strip-components 1
  log_end " done"
else
  log_end " already downloaded!"
fi
if [ ! -d $clang_dirname ];
then
  log "Invalid clang setup!"
  log_exit "Remove $clang_final_filename and try to configure again"
fi
cxx_platform_flags="-I${clang_dirname}/include "$cxx_platform_flags
ld_platform_libs="-L${clang_dirname}/lib "$ld_platform_libs

# Configure the makefile
log_start "Populating Makefile..."
rm -f Makefile
sed "s#%CXX_PLATFORM_FLAGS%#${cxx_platform_flags}#" ./Makefile.in |\
sed "s#%CXX%#${cxx}#" |\
sed "s#%CLANG_DIR%#${clang_dirname}#" |\
sed "s#%LD_PLATFORM_LIBS%#${ld_platform_libs}#" > Makefile
log_end " done"

log_start "Generation sources..."
[ -f include/env/impl.hpp ] && rm -f include/env/impl.hpp
cat <<EOF > include/env/impl.hpp
/* XXX: Automagically generated by ./configure. No touching. */
#pragma once

namespace color_coded
{
  template <>
  struct environment<env::tag>
  {
    static char constexpr const * const cwd{ "$PWD" };
    static char constexpr const * const clang_include
    { "-I$PWD/$clang_dirname/include" };
    static char constexpr const * const clang_include_cpp
    { "-I$PWD/$clang_dirname/include/c++/v1" };
    static char constexpr const * const clang_lib_include
    { "-I$PWD/$clang_dirname/lib/clang/3.6.0/include" };
  };
}
EOF
log_end " done"

log "Done configuring ${project}"

# Describe next steps
log
log "To run compile, use \`make\`"
